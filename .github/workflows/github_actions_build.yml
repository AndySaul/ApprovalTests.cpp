name: build

on:
  push:
    branches:
      - '*'
      - '!travis_ccache'
  pull_request:
    branches:
      - '*'
      - '!travis_ccache'

jobs:
  clang-format:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@master
      - uses: DoozyX/clang-format-lint-action@v0.5
        with:
          source: '.'
          exclude: './third_party'
          clangFormatVersion: 9

  # Commented-out, as it keeps failing with http 429 error - too many requests
  # e.g. https://github.com/approvals/ApprovalTests.cpp/runs/541867195
  #  markdown-link-check:
  #    runs-on: ubuntu-18.04
  #    steps:
  #      - uses: actions/checkout@master
  #      - uses: actions/setup-node@v1
  #        with:
  #          node-version: '12.x'
  #      - name: Install markdown-link-check
  #        run: npm i -g markdown-link-check
  #      - name: Run markdown-link-check on *.md files
  #        run: ./scripts/check_links.sh

#  Linux:
#    env:
#      BUILD_DIR_PATH: ${{ github.workspace }}/${{ matrix.relative_build_dir_path }}build_space
#      CC: ${{ matrix.c-compiler }}
#      CXX: ${{ matrix.cxx-compiler }}
#    strategy:
#      fail-fast: false
#      matrix:
#        include:
#          - job-name: 'clang6.0'
#            os: ubuntu-18.04
#            c-compiler: 'clang-6.0'
#            cxx-compiler: 'clang++-6.0'
#            generator: '"Unix Makefiles"'
#            relative_build_dir_path: ''
#
##          - job-name: 'clang7'
##            os: ubuntu-18.04
##            c-compiler: 'clang-7'
##            cxx-compiler: 'clang++-7'
##            generator: '"Unix Makefiles"'
##            relative_build_dir_path: ''
#
#          - job-name: 'clang8'
#            os: ubuntu-18.04
#            c-compiler: 'clang-8'
#            cxx-compiler: 'clang++-8'
#            generator: '"Unix Makefiles"'
#            relative_build_dir_path: ''
#
#          - job-name: 'clang9'
#            os: ubuntu-18.04
#            c-compiler: 'clang-9'
#            cxx-compiler: 'clang++-9'
#            generator: '"Unix Makefiles"'
#            relative_build_dir_path: ''
#
#          - job-name: 'clang10'
#            os: ubuntu-20.04
#            c-compiler: 'clang-10'
#            cxx-compiler: 'clang++-10'
#            generator: '"Unix Makefiles"'
#            relative_build_dir_path: ''
#
##          - job-name: 'gcc5'
##            os: ubuntu-18.04
##            c-compiler: 'gcc-5'
##            cxx-compiler: 'g++-5'
##            generator: '"Unix Makefiles"'
##            relative_build_dir_path: ''
##
##          - job-name: 'gcc6'
##            os: ubuntu-18.04
##            c-compiler: 'gcc-6'
##            cxx-compiler: 'g++-6'
##            generator: '"Unix Makefiles"'
##            relative_build_dir_path: ''
#
#          - job-name: 'gcc7'
#            os: ubuntu-18.04
#            c-compiler: 'gcc-7'
#            cxx-compiler: 'g++-7'
#            generator: '"Unix Makefiles"'
#            relative_build_dir_path: ''
#
#          - job-name: 'gcc8'
#            os: ubuntu-18.04
#            c-compiler: 'gcc-8'
#            cxx-compiler: 'g++-8'
#            generator: '"Unix Makefiles"'
#            relative_build_dir_path: ''
#
#          - job-name: 'gcc9'
#            os: ubuntu-18.04
#            c-compiler: 'gcc-9'
#            cxx-compiler: 'g++-9'
#            generator: '"Unix Makefiles"'
#            relative_build_dir_path: ''
#
#          - job-name: 'gcc10'
#            os: ubuntu-18.04
#            c-compiler: 'gcc-10'
#            cxx-compiler: 'g++-10'
#            generator: '"Unix Makefiles"'
#            relative_build_dir_path: ''
#
#          - job-name: 'gcc7 ninja'
#            os: ubuntu-18.04
#            c-compiler: 'gcc-7'
#            cxx-compiler: 'g++-7'
#            generator: '"Ninja"'
#            relative_build_dir_path: '../'
#    runs-on: ${{ matrix.os }}
#    steps:
#      - uses: actions/checkout@master
#      - uses: seanmiddleditch/gha-setup-ninja@v3
#        if: contains(matrix.generator, 'Ninja')
#
#      - name: install boost for linux
#        run: |
#          sudo apt-get update -qq
#          sudo apt-get install -y libboost-all-dev
#
#      - name: configure
#        run: |
#          mkdir $BUILD_DIR_PATH
#          cd $BUILD_DIR_PATH
#          cmake --version
#          cmake -G ${{ matrix.generator }} ${{ github.workspace }} -DCMAKE_BUILD_TYPE=Debug
#      - name: build
#        run: |
#          cd $BUILD_DIR_PATH
#          cmake --build .
#      - name: test
#        run: |
#          cd $BUILD_DIR_PATH
#          ctest --verbose --output-on-failure -C Debug

  macOS:
    env:
      BUILD_DIR_PATH: ${{ github.workspace }}/${{ matrix.relative_build_dir_path }}build_space
      DEVELOPER_DIR: '/Applications/Xcode_${{ matrix.xcode-version }}.app/Contents/Developer'
    strategy:
      fail-fast: false
      matrix:
        include:
          - job-name:  macOS-latest
            os: macOS-latest
            xcode-version: '11.7'
            generator: '"Unix Makefiles"'
            relative_build_dir_path: ''

          - job-name:  macOS-latest-unity
            os: macOS-latest
            xcode-version: '11.7'
            generator: '"Unix Makefiles" -DCMAKE_UNITY_BUILD=yes -DCMAKE_UNITY_BUILD_BATCH_SIZE=50'
            relative_build_dir_path: ''

          - job-name:  macOS-latest-ninja
            xcode-version: '11.7'
            os: macOS-latest
            generator: '"Ninja"'
            relative_build_dir_path: '../'

          - job-name:  macOS-latest-ninja-unity
            xcode-version: '11.7'
            os: macOS-latest
            generator: '"Ninja" -DCMAKE_UNITY_BUILD=yes -DCMAKE_UNITY_BUILD_BATCH_SIZE=50'
            relative_build_dir_path: ''
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@master
      - uses: seanmiddleditch/gha-setup-ninja@v3
        if: contains(matrix.generator, 'Ninja')

      - name: install boost for macOS
        run: |
          brew install boost

      - name: configure
        run: |
          mkdir $BUILD_DIR_PATH
          cd $BUILD_DIR_PATH
          cmake --version
          cmake -G ${{ matrix.generator }} ${{ github.workspace }} -DCMAKE_BUILD_TYPE=Debug
      - name: build
        run: |
          cd $BUILD_DIR_PATH
          cmake --build .
      - name: test
        run: |
          cd $BUILD_DIR_PATH
          ctest --verbose --output-on-failure -C Debug

  Windows:
    env:
      BUILD_DIR_PATH: ${{ github.workspace }}/build_space
    strategy:
      fail-fast: false
      matrix:
        include:
          - job-name: windows-latest
            os: windows-latest
            generator: '"Visual Studio 16 2019"'

          - job-name: windows-latest (clangcl)
            os: windows-latest
            generator: '"Visual Studio 16 2019" -T "clangcl"'

          - job-name: windows-2016
            os: windows-2016
            generator: '"Visual Studio 15 2017"'

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@master

      - name: set up boost for windows
        run: |
          ${boostroot} = "${env:BOOST_ROOT_1_72_0}"
          echo "BOOST_ROOT=${boostroot}" >> ${env:GITHUB_ENV}
          echo "BOOST_INCLUDEDIR=${boostroot}\include" >> ${env:GITHUB_ENV}
          echo "BOOST_LIBRARYDIR=${boostroot}\lib" >> ${env:GITHUB_ENV}

      - name: configure
        run: |
          mkdir ${{ env.BUILD_DIR_PATH }}
          cd ${{ env.BUILD_DIR_PATH }}
          cmake --version
          cmake -G ${{ matrix.generator }} ${{ github.workspace }} -DCMAKE_BUILD_TYPE=Debug
      - name: build
        run: |
          cd ${{ env.BUILD_DIR_PATH }}
          cmake --build .
      - name: test
        run: |
          cd ${{ env.BUILD_DIR_PATH }}
          ctest --verbose --output-on-failure -C Debug
